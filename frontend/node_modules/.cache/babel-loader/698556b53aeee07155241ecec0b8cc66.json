{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\Andrey Torres\\\\Desktop\\\\omnistack\\\\frontend\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\Andrey Torres\\\\Desktop\\\\omnistack\\\\frontend\\\\src\\\\pages\\\\Dashboard\\\\index.js\";\nimport React, { useState, useEffect, useMemo } from 'react';\nimport { Link } from 'react-router-dom'; //Criar links que irão para outra rota sem a necessidade do history.push\n\nimport socketio from 'socket.io-client';\nimport api from '../../services/api';\nimport './styles.css';\nexport default function Dashboard() {\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        spots = _useState2[0],\n        setSpots = _useState2[1]; //Inicializamos o useState como array pois oq temos é um array de spots\n\n\n  const _useState3 = useState([]),\n        _useState4 = _slicedToArray(_useState3, 2),\n        requests = _useState4[0],\n        setRequests = _useState4[1];\n\n  const user_id = localStorage.getItem('user');\n  const socket = useMemo(() => socketio('http://localhost:3333', {\n    //O useMemo mantém a variavel guardada até que haja alguma alteração ee caso houver executa o codigo\n    query: {\n      user_id\n    }\n  }), [user_id]); //Nesse caso só irá haver uma nova conexão caso mude o user._id\n\n  useEffect(() => {\n    socket.on('booking_request', data => {\n      setRequests([...requests, data]); //O '...' irá adicionar o 'data' no final do array de requests\n    });\n  }, [requests, socket]);\n  useEffect(() => {\n    async function loadSpots() {\n      const user_id = localStorage.getItem('user');\n      const response = await api.get(\"/dashboard\", {\n        headers: {\n          user_id\n        }\n      });\n      setSpots(response.data); //console.log(user_id);\n      //console.log(response);\n    }\n\n    loadSpots();\n  }, []); //A função (1º Parametro) será executada quando houverem alterações no segundo parametro\n  //Passamos o [] vazio para que a função useEffect seja realizada apenas uma vez (Ao inicializar a página)\n\n  function handleAccept(id) {}\n\n  function handleReject(id) {}\n\n  return React.createElement(React.Fragment, null, React.createElement(\"ul\", {\n    className: \"notifications\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }, requests.map(request => React.createElement(\"li\", {\n    key: request._id,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }, React.createElement(\"strong\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }, request.user.email), \" est\\xE1 solicitando uma reserva em \", React.createElement(\"strong\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }, \" \", request.spot.company), \" para a data \", React.createElement(\"strong\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }, request.date)), React.createElement(\"button\", {\n    className: \"accept\",\n    onClick: () => handleAccept(requet._id),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }, \" ACEITAR \"), React.createElement(\"button\", {\n    className: \"reject\",\n    onClick: () => handleReject(request._id),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, \" REJEITAR \")))), React.createElement(\"ul\", {\n    className: \"spot-list\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }, spots.map(spot => React.createElement(\"li\", {\n    key: spot._id,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }, React.createElement(\"header\", {\n    style: {\n      backgroundImage: `url(${spot.thumbnail_url})`\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }), React.createElement(\"strong\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }, spot.company), React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }, spot.price ? `R$${spot.price}/dia` : 'GRATUITO')))), React.createElement(Link, {\n    to: \"new\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    className: \"btn\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }, \"Cadastrar novo spot\")));\n}","map":{"version":3,"sources":["C:/Users/Andrey Torres/Desktop/omnistack/frontend/src/pages/Dashboard/index.js"],"names":["React","useState","useEffect","useMemo","Link","socketio","api","Dashboard","spots","setSpots","requests","setRequests","user_id","localStorage","getItem","socket","query","on","data","loadSpots","response","get","headers","handleAccept","id","handleReject","map","request","_id","user","email","spot","company","date","requet","backgroundImage","thumbnail_url","price"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useMemo } from 'react';\r\nimport { Link } from 'react-router-dom'; //Criar links que irão para outra rota sem a necessidade do history.push\r\nimport socketio from 'socket.io-client';\r\nimport api from '../../services/api';\r\nimport './styles.css';\r\n\r\nexport default function Dashboard(){\r\n    const [spots, setSpots] = useState([]); //Inicializamos o useState como array pois oq temos é um array de spots\r\n    const [requests, setRequests] = useState([]);\r\n\r\n    const user_id = localStorage.getItem('user');\r\n\r\n    const socket = useMemo(() => socketio('http://localhost:3333', { //O useMemo mantém a variavel guardada até que haja alguma alteração ee caso houver executa o codigo\r\n        query: { user_id },\r\n    }), [ user_id ]); //Nesse caso só irá haver uma nova conexão caso mude o user._id\r\n\r\n    \r\n    useEffect(() =>{\r\n        socket.on('booking_request', data => {\r\n            setRequests([ ... requests, data]); //O '...' irá adicionar o 'data' no final do array de requests\r\n        })\r\n    }, [requests, socket]);\r\n\r\n\r\n    useEffect(() => {\r\n        async function loadSpots() {\r\n            const user_id = localStorage.getItem('user');\r\n            const response = await api.get(\"/dashboard\", {\r\n                headers: {user_id}\r\n            });\r\n            setSpots(response.data);\r\n            //console.log(user_id);\r\n            //console.log(response);\r\n            \r\n        }\r\n\r\n        loadSpots();\r\n    }, []); //A função (1º Parametro) será executada quando houverem alterações no segundo parametro\r\n    //Passamos o [] vazio para que a função useEffect seja realizada apenas uma vez (Ao inicializar a página)\r\n    \r\n    function handleAccept(id){\r\n\r\n    }\r\n\r\n    function handleReject(id){\r\n\r\n    }\r\n\r\n    return(\r\n        <>\r\n\r\n            <ul className=\"notifications\">\r\n                {requests.map(request => (\r\n                    <li key={request._id}>\r\n                        <p>\r\n                            <strong>{request.user.email}</strong> está solicitando uma reserva em <strong> {request.spot.company}</strong> para a data <strong>{request.date}</strong>\r\n                        </p>\r\n                            <button className='accept' onClick={() => handleAccept(requet._id)}> ACEITAR </button>\r\n                            <button className='reject' onClick={() => handleReject(request._id)}> REJEITAR </button>\r\n                    </li>\r\n                ))}\r\n            </ul>\r\n\r\n            <ul className=\"spot-list\">\r\n                {spots.map(spot => (\r\n                    <li key={spot._id}>\r\n                        <header style={{backgroundImage: `url(${spot.thumbnail_url})`}}/>\r\n                        <strong>{spot.company}</strong>\r\n                        <span>{spot.price ? `R$${spot.price}/dia` : 'GRATUITO'}</span>\r\n                    </li>\r\n                ))}\r\n           </ul>\r\n          \r\n           <Link to=\"new\">\r\n                <button className=\"btn\">Cadastrar novo spot</button>\r\n           </Link>\r\n                \r\n        </>\r\n    );\r\n    \r\n}"]},"metadata":{},"sourceType":"module"}